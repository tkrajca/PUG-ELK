filter {
  if [type] == "python" and "_parsed" not in [tags] {
    multiline {
        pattern => "^%{TIMESTAMP_ISO8601}:"
        negate => true
        what => previous
    }
    grok {
      ##  %(asctime)s %(levelname)s %(module)s %(name)s PID: %(process)d  %(message)s
      match => { "message" => "(?m)%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{NOTSPACE:module} %{NOTSPACE:logger} PID: %{POSINT}  %{GREEDYDATA:pymessage}" }
      add_field => [ "received_at", "%{@timestamp}" ]
    }
    grok {
      match => { "host" => "%{IP:shorthost}|%{WORD:shorthost}" }
      add_field => [ "received_from", "%{shorthost}" ]
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "@source_host", "%{shorthost}" ]
        replace => [ "@message", "%{pymessage}" ]
      }
    }
    date {
      match => [ "pytimestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss,SSS" ]
      timezone => "UTC"
    }

    if ([loglevel] =~ /(ERROR|CRITICAL|FATAL)/) {
      mutate {
        add_tag => [ "zabbix" ]
        add_field => [
          "zabbix_item", "log.errors[%{program}]",
          "zabbix_host", "%{host}",
          "send_field", "@message"
        ]
      }
    }
    mutate {
      add_tag => [ "_parsed" ]
      remove_field => [ "pytimestamp", "pymessage", "shorthost" ]
    }
  }
}
